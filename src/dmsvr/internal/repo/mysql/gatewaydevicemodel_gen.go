// Code generated by goctl. DO NOT EDIT!

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gatewayDeviceFieldNames          = builder.RawFieldNames(&GatewayDevice{})
	gatewayDeviceRows                = strings.Join(gatewayDeviceFieldNames, ",")
	gatewayDeviceRowsExpectAutoSet   = strings.Join(stringx.Remove(gatewayDeviceFieldNames, "`id`", "`updatedTime`", "`deletedTime`", "`createdTime`"), ",")
	gatewayDeviceRowsWithPlaceHolder = strings.Join(stringx.Remove(gatewayDeviceFieldNames, "`id`", "`updatedTime`", "`deletedTime`", "`createdTime`"), "=?,") + "=?"
)

type (
	gatewayDeviceModel interface {
		Insert(ctx context.Context, data *GatewayDevice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GatewayDevice, error)
		FindOneByGatewayDeviceNameGatewayProductIDProductIDDeviceName(ctx context.Context, gatewayDeviceName string, gatewayProductID string, productID string, deviceName string) (*GatewayDevice, error)
		Update(ctx context.Context, data *GatewayDevice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGatewayDeviceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GatewayDevice struct {
		Id                int64        `db:"id"`
		GatewayProductID  string       `db:"gatewayProductID"`  // 网关产品id
		GatewayDeviceName string       `db:"gatewayDeviceName"` // 网关设备名称
		ProductID         string       `db:"productID"`         // 子设备产品id
		DeviceName        string       `db:"deviceName"`        // 子设备名称
		CreatedTime       time.Time    `db:"createdTime"`       // 创建时间
		UpdatedTime       time.Time    `db:"updatedTime"`       // 更新时间
		DeletedTime       sql.NullTime `db:"deletedTime"`       // 删除时间
	}
)

func newGatewayDeviceModel(conn sqlx.SqlConn) *defaultGatewayDeviceModel {
	return &defaultGatewayDeviceModel{
		conn:  conn,
		table: "`gateway_device`",
	}
}

func (m *defaultGatewayDeviceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGatewayDeviceModel) FindOne(ctx context.Context, id int64) (*GatewayDevice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gatewayDeviceRows, m.table)
	var resp GatewayDevice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGatewayDeviceModel) FindOneByGatewayDeviceNameGatewayProductIDProductIDDeviceName(ctx context.Context, gatewayDeviceName string, gatewayProductID string, productID string, deviceName string) (*GatewayDevice, error) {
	var resp GatewayDevice
	query := fmt.Sprintf("select %s from %s where `gatewayDeviceName` = ? and `gatewayProductID` = ? and `productID` = ? and `deviceName` = ? limit 1", gatewayDeviceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, gatewayDeviceName, gatewayProductID, productID, deviceName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGatewayDeviceModel) Insert(ctx context.Context, data *GatewayDevice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, gatewayDeviceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GatewayProductID, data.GatewayDeviceName, data.ProductID, data.DeviceName)
	return ret, err
}

func (m *defaultGatewayDeviceModel) Update(ctx context.Context, newData *GatewayDevice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gatewayDeviceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.GatewayProductID, newData.GatewayDeviceName, newData.ProductID, newData.DeviceName, newData.Id)
	return err
}

func (m *defaultGatewayDeviceModel) tableName() string {
	return m.table
}
