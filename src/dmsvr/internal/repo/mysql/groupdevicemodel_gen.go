// Code generated by goctl. DO NOT EDIT!

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupDeviceFieldNames          = builder.RawFieldNames(&GroupDevice{})
	groupDeviceRows                = strings.Join(groupDeviceFieldNames, ",")
	groupDeviceRowsExpectAutoSet   = strings.Join(stringx.Remove(groupDeviceFieldNames, "`id`", "`createdTime`", "`updatedTime`", "`deletedTime`"), ",")
	groupDeviceRowsWithPlaceHolder = strings.Join(stringx.Remove(groupDeviceFieldNames, "`id`", "`createdTime`", "`updatedTime`", "`deletedTime`"), "=?,") + "=?"
)

type (
	groupDeviceModel interface {
		Insert(ctx context.Context, data *GroupDevice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupDevice, error)
		FindOneByGroupIDProductIDDeviceName(ctx context.Context, groupID int64, productID string, deviceName string) (*GroupDevice, error)
		Update(ctx context.Context, data *GroupDevice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupDeviceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupDevice struct {
		Id          int64        `db:"id"`
		GroupID     int64        `db:"groupID"`     // 分组ID
		ProductID   string       `db:"productID"`   // 产品id
		DeviceName  string       `db:"deviceName"`  // 设备名称
		CreatedTime time.Time    `db:"createdTime"` // 创建时间
		UpdatedTime time.Time    `db:"updatedTime"` // 更新时间
		DeletedTime sql.NullTime `db:"deletedTime"` // 删除时间
	}
)

func newGroupDeviceModel(conn sqlx.SqlConn) *defaultGroupDeviceModel {
	return &defaultGroupDeviceModel{
		conn:  conn,
		table: "`group_device`",
	}
}

func (m *defaultGroupDeviceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupDeviceModel) FindOne(ctx context.Context, id int64) (*GroupDevice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupDeviceRows, m.table)
	var resp GroupDevice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupDeviceModel) FindOneByGroupIDProductIDDeviceName(ctx context.Context, groupID int64, productID string, deviceName string) (*GroupDevice, error) {
	var resp GroupDevice
	query := fmt.Sprintf("select %s from %s where `groupID` = ? and `productID` = ? and `deviceName` = ? limit 1", groupDeviceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, groupID, productID, deviceName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupDeviceModel) Insert(ctx context.Context, data *GroupDevice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, groupDeviceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GroupID, data.ProductID, data.DeviceName)
	return ret, err
}

func (m *defaultGroupDeviceModel) Update(ctx context.Context, newData *GroupDevice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupDeviceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.GroupID, newData.ProductID, newData.DeviceName, newData.Id)
	return err
}

func (m *defaultGroupDeviceModel) tableName() string {
	return m.table
}
