// Code generated by goctl. DO NOT EDIT!

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFirmwareFieldNames          = builder.RawFieldNames(&ProductFirmware{})
	productFirmwareRows                = strings.Join(productFirmwareFieldNames, ",")
	productFirmwareRowsExpectAutoSet   = strings.Join(stringx.Remove(productFirmwareFieldNames, "`id`", "`createdTime`", "`updatedTime`", "`deletedTime`"), ",")
	productFirmwareRowsWithPlaceHolder = strings.Join(stringx.Remove(productFirmwareFieldNames, "`id`", "`createdTime`", "`updatedTime`", "`deletedTime`"), "=?,") + "=?"
)

type (
	productFirmwareModel interface {
		Insert(ctx context.Context, data *ProductFirmware) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductFirmware, error)
		FindOneByProductIDVersion(ctx context.Context, productID string, version string) (*ProductFirmware, error)
		Update(ctx context.Context, data *ProductFirmware) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductFirmwareModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductFirmware struct {
		Id          int64        `db:"id"`
		ProductID   string       `db:"productID"` // 产品id
		Version     string       `db:"version"`   // 固件版本
		CreatedTime time.Time    `db:"createdTime"`
		UpdatedTime time.Time    `db:"updatedTime"`
		DeletedTime sql.NullTime `db:"deletedTime"`
		Name        string       `db:"name"` // 固件名称
		Desc        string       `db:"desc"` // 描述
		Size        int64        `db:"size"` // 固件大小
		Dir         string       `db:"dir"`  // 固件标识,拿来下载文件
	}
)

func newProductFirmwareModel(conn sqlx.SqlConn) *defaultProductFirmwareModel {
	return &defaultProductFirmwareModel{
		conn:  conn,
		table: "`product_firmware`",
	}
}

func (m *defaultProductFirmwareModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductFirmwareModel) FindOne(ctx context.Context, id int64) (*ProductFirmware, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productFirmwareRows, m.table)
	var resp ProductFirmware
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductFirmwareModel) FindOneByProductIDVersion(ctx context.Context, productID string, version string) (*ProductFirmware, error) {
	var resp ProductFirmware
	query := fmt.Sprintf("select %s from %s where `productID` = ? and `version` = ? limit 1", productFirmwareRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, productID, version)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductFirmwareModel) Insert(ctx context.Context, data *ProductFirmware) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, productFirmwareRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductID, data.Version, data.Name, data.Desc, data.Size, data.Dir)
	return ret, err
}

func (m *defaultProductFirmwareModel) Update(ctx context.Context, newData *ProductFirmware) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productFirmwareRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ProductID, newData.Version, newData.Name, newData.Desc, newData.Size, newData.Dir, newData.Id)
	return err
}

func (m *defaultProductFirmwareModel) tableName() string {
	return m.table
}
