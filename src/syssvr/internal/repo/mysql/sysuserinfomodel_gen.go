// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserInfoFieldNames          = builder.RawFieldNames(&SysUserInfo{})
	sysUserInfoRows                = strings.Join(sysUserInfoFieldNames, ",")
	sysUserInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserInfoFieldNames, "`createdTime`", "`updatedTime`", "`deletedTime`"), ",")
	sysUserInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserInfoFieldNames, "`uid`", "`createdTime`", "`updatedTime`", "`deletedTime`"), "=?,") + "=?"
)

type (
	sysUserInfoModel interface {
		Insert(ctx context.Context, data *SysUserInfo) (sql.Result, error)
		FindOne(ctx context.Context, uid int64) (*SysUserInfo, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*SysUserInfo, error)
		FindOneByPhone(ctx context.Context, phone sql.NullString) (*SysUserInfo, error)
		FindOneByUserName(ctx context.Context, userName sql.NullString) (*SysUserInfo, error)
		FindOneByWechat(ctx context.Context, wechat sql.NullString) (*SysUserInfo, error)
		Update(ctx context.Context, data *SysUserInfo) error
		Delete(ctx context.Context, uid int64) error
	}

	defaultSysUserInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysUserInfo struct {
		Uid         int64          `db:"uid"`         // 用户id
		UserName    sql.NullString `db:"userName"`    // 登录用户名
		Password    string         `db:"password"`    // 登录密码
		Email       sql.NullString `db:"email"`       // 邮箱
		Phone       sql.NullString `db:"phone"`       // 手机号
		Wechat      sql.NullString `db:"wechat"`      // 微信union id
		LastIP      string         `db:"lastIP"`      // 最后登录ip
		RegIP       string         `db:"regIP"`       // 注册ip
		NickName    string         `db:"nickName"`    // 用户的昵称
		Sex         int64          `db:"sex"`         // 用户的性别，值为1时是男性，值为2时是女性，其他值为未知
		City        string         `db:"city"`        // 用户所在城市
		Country     string         `db:"country"`     // 用户所在国家
		Province    string         `db:"province"`    // 用户所在省份
		Language    string         `db:"language"`    // 用户的语言，简体中文为zh_CN
		HeadImgUrl  string         `db:"headImgUrl"`  // 用户头像
		Role        int64          `db:"role"`        // 用户角色
		CreatedTime time.Time      `db:"createdTime"` // 创建时间
		UpdatedTime time.Time      `db:"updatedTime"` // 更新时间
		DeletedTime sql.NullTime   `db:"deletedTime"` // 删除时间，默认为空，表示未删除，非空表示已删除
	}
)

func newSysUserInfoModel(conn sqlx.SqlConn) *defaultSysUserInfoModel {
	return &defaultSysUserInfoModel{
		conn:  conn,
		table: "`sys_user_info`",
	}
}

func (m *defaultSysUserInfoModel) Delete(ctx context.Context, uid int64) error {
	query := fmt.Sprintf("delete from %s where `uid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, uid)
	return err
}

func (m *defaultSysUserInfoModel) FindOne(ctx context.Context, uid int64) (*SysUserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", sysUserInfoRows, m.table)
	var resp SysUserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserInfoModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*SysUserInfo, error) {
	var resp SysUserInfo
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", sysUserInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserInfoModel) FindOneByPhone(ctx context.Context, phone sql.NullString) (*SysUserInfo, error) {
	var resp SysUserInfo
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", sysUserInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserInfoModel) FindOneByUserName(ctx context.Context, userName sql.NullString) (*SysUserInfo, error) {
	var resp SysUserInfo
	query := fmt.Sprintf("select %s from %s where `userName` = ? limit 1", sysUserInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserInfoModel) FindOneByWechat(ctx context.Context, wechat sql.NullString) (*SysUserInfo, error) {
	var resp SysUserInfo
	query := fmt.Sprintf("select %s from %s where `wechat` = ? limit 1", sysUserInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, wechat)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserInfoModel) Insert(ctx context.Context, data *SysUserInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.UserName, data.Password, data.Email, data.Phone, data.Wechat, data.LastIP, data.RegIP, data.NickName, data.Sex, data.City, data.Country, data.Province, data.Language, data.HeadImgUrl, data.Role)
	return ret, err
}

func (m *defaultSysUserInfoModel) Update(ctx context.Context, newData *SysUserInfo) error {
	query := fmt.Sprintf("update %s set %s where `uid` = ?", m.table, sysUserInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserName, newData.Password, newData.Email, newData.Phone, newData.Wechat, newData.LastIP, newData.RegIP, newData.NickName, newData.Sex, newData.City, newData.Country, newData.Province, newData.Language, newData.HeadImgUrl, newData.Role, newData.Uid)
	return err
}

func (m *defaultSysUserInfoModel) tableName() string {
	return m.table
}
